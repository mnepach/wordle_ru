import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../services/game_service.dart';
import '../constants/words.dart';
import '../widgets/game_board.dart';
import '../widgets/keyboard.dart';

// –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∏–≥—Ä—ã
class GameScreen extends StatefulWidget {
  const GameScreen({Key? key}) : super(key: key);

  @override
  State<GameScreen> createState() => _GameScreenState();
}

class _GameScreenState extends State<GameScreen> {
  late GameService _gameService;
  final FocusNode _focusNode = FocusNode();

  @override
  void initState() {
    super.initState();
    _startNewGame();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–∏–µ–º–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _focusNode.requestFocus();
    });
  }

  @override
  void dispose() {
    _focusNode.dispose();
    super.dispose();
  }

  // –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
  void _startNewGame() {
    setState(() {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–æ –¥–Ω—è (–æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –¥–ª—è –≤—Å–µ—Ö)
      _gameService = GameService(targetWord: WordsList.getWordOfTheDay());
      // –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ:
      // _gameService = GameService(targetWord: WordsList.getRandomWord());
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  void _handleKeyEvent(RawKeyEvent event) {
    if (event is! RawKeyDownEvent) return;

    final key = event.logicalKey;

    if (key == LogicalKeyboardKey.enter) {
      _onEnterPressed();
    } else if (key == LogicalKeyboardKey.backspace) {
      _onDeletePressed();
    } else {
      final char = event.character?.toUpperCase();
      if (char != null && char.length == 1) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä—É—Å—Å–∫–∞—è –±—É–∫–≤–∞
        if (RegExp(r'[–ê-–Ø–Å]').hasMatch(char)) {
          _onLetterPressed(char);
        }
      }
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –±—É–∫–≤—É
  void _onLetterPressed(String letter) {
    if (_gameService.isGameOver) return;

    setState(() {
      _gameService.addLetter(letter);
    });
  }

  // –£–¥–∞–ª–∏—Ç—å –±—É–∫–≤—É
  void _onDeletePressed() {
    if (_gameService.isGameOver) return;

    setState(() {
      _gameService.removeLetter();
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
  void _onEnterPressed() {
    if (_gameService.isGameOver) return;

    final success = _gameService.submitWord();

    if (!success) {
      // –°–ª–æ–≤–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      final currentRow = _gameService.getCurrentRow();
      if (currentRow.isFilled()) {
        _showMessage('–°–ª–æ–≤–∞ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ');
      } else {
        _showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—É–∫–≤');
      }
      return;
    }

    setState(() {
      // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (_gameService.isGameOver) {
        Future.delayed(const Duration(milliseconds: 2000), () {
          _showGameOverDialog();
        });
      }
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  void _showMessage(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          message,
          textAlign: TextAlign.center,
          style: const TextStyle(fontWeight: FontWeight.bold),
        ),
        duration: const Duration(milliseconds: 1500),
        behavior: SnackBarBehavior.floating,
        margin: const EdgeInsets.only(
          bottom: 100,
          left: 50,
          right: 50,
        ),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
    );
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
  void _showGameOverDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: Text(
          _gameService.isWinner ? '–ü–æ–±–µ–¥–∞! üéâ' : '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞',
          textAlign: TextAlign.center,
          style: const TextStyle(fontWeight: FontWeight.bold),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            if (!_gameService.isWinner) ...[
              const Text(
                '–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:',
                style: TextStyle(fontSize: 16),
              ),
              const SizedBox(height: 8),
              Text(
                _gameService.targetWord,
                style: const TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  letterSpacing: 2,
                ),
              ),
            ] else ...[
              Text(
                '–û—Ç–≥–∞–¥–∞–Ω–æ –∑–∞ ${_gameService.currentRowIndex + 1} ${_getPluralAttempts(_gameService.currentRowIndex + 1)}!',
                textAlign: TextAlign.center,
                style: const TextStyle(fontSize: 16),
              ),
            ],
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              _startNewGame();
            },
            child: const Text(
              '–ù–æ–≤–∞—è –∏–≥—Ä–∞',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
          ),
        ],
      ),
    );
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–ø–æ–ø—ã—Ç–∫–∞"
  String _getPluralAttempts(int count) {
    if (count % 10 == 1 && count % 100 != 11) {
      return '–ø–æ–ø—ã—Ç–∫—É';
    } else if ([2, 3, 4].contains(count % 10) && ![12, 13, 14].contains(count % 100)) {
      return '–ø–æ–ø—ã—Ç–∫–∏';
    } else {
      return '–ø–æ–ø—ã—Ç–æ–∫';
    }
  }

  @override
  Widget build(BuildContext context) {
    return RawKeyboardListener(
      focusNode: _focusNode,
      onKey: _handleKeyEvent,
      child: Scaffold(
        backgroundColor: Colors.white,
        appBar: AppBar(
          backgroundColor: Colors.white,
          elevation: 1,
          title: const Text(
            'WORDLE',
            style: TextStyle(
              fontSize: 36,
              fontWeight: FontWeight.bold,
              letterSpacing: 2,
              color: Colors.black,
            ),
          ),
          centerTitle: true,
          actions: [
            IconButton(
              icon: const Icon(Icons.help_outline, color: Colors.black),
              onPressed: () => _showHelpDialog(),
            ),
            IconButton(
              icon: const Icon(Icons.refresh, color: Colors.black),
              onPressed: () => _showNewGameConfirmation(),
            ),
          ],
        ),
        body: GestureDetector(
          onTap: () {
            _focusNode.requestFocus();
          },
          child: Container(
            color: Colors.white,
            child: Column(
              children: [
                const SizedBox(height: 20),
                // –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
                Expanded(
                  child: Center(
                    child: SingleChildScrollView(
                      child: GameBoard(rows: _gameService.rows),
                    ),
                  ),
                ),
                // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                GameKeyboard(
                  onLetterTap: _onLetterPressed,
                  onDeleteTap: _onDeletePressed,
                  onEnterTap: _onEnterPressed,
                  keyboardStatus: _gameService.keyboardStatus,
                ),
                const SizedBox(height: 20),
              ],
            ),
          ),
        ),
      ),
    );
  }

  // –î–∏–∞–ª–æ–≥ –ø–æ–º–æ—â–∏
  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text(
          '–ö–∞–∫ –∏–≥—Ä–∞—Ç—å',
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        content: const SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                '–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ –∑–∞ 6 –ø–æ–ø—ã—Ç–æ–∫.\n',
                style: TextStyle(fontSize: 14),
              ),
              Text(
                '–ö–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–ª–æ–≤–æ–º –∏–∑ 5 –±—É–∫–≤.\n',
                style: TextStyle(fontSize: 14),
              ),
              Text(
                '–¶–≤–µ—Ç –ø–ª–∏—Ç–æ–∫ –º–µ–Ω—è–µ—Ç—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞—è –Ω–∞—Å–∫–æ–ª—å–∫–æ –±–ª–∏–∑–∫–æ –≤–∞—à–µ —Å–ª–æ–≤–æ:',
                style: TextStyle(fontSize: 14),
              ),
              SizedBox(height: 16),
              _HelpExample(
                letter: '–ü',
                color: Color(0xFF6AAA64),
                description: '–ë—É–∫–≤–∞ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ –Ω–∞ —ç—Ç–æ–º –º–µ—Å—Ç–µ',
              ),
              SizedBox(height: 8),
              _HelpExample(
                letter: '–û',
                color: Color(0xFFC9B458),
                description: '–ë—É–∫–≤–∞ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ, –Ω–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ',
              ),
              SizedBox(height: 8),
              _HelpExample(
                letter: '–¢',
                color: Color(0xFF787C7E),
                description: '–ë—É–∫–≤—ã –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ',
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('–ü–æ–Ω—è—Ç–Ω–æ'),
          ),
        ],
      ),
    );
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  void _showNewGameConfirmation() {
    if (_gameService.isGameOver) {
      _startNewGame();
      return;
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–ù–æ–≤–∞—è –∏–≥—Ä–∞?'),
        content: const Text('–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              _startNewGame();
            },
            child: const Text('–ù–∞—á–∞—Ç—å'),
          ),
        ],
      ),
    );
  }
}

// –í–∏–¥–∂–µ—Ç –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤ –ø–æ–º–æ—â–∏
class _HelpExample extends StatelessWidget {
  final String letter;
  final Color color;
  final String description;

  const _HelpExample({
    Key? key,
    required this.letter,
    required this.color,
    required this.description,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Container(
          width: 40,
          height: 40,
          decoration: BoxDecoration(
            color: color,
            borderRadius: BorderRadius.circular(4),
          ),
          child: Center(
            child: Text(
              letter,
              style: const TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Text(
            description,
            style: const TextStyle(fontSize: 13),
          ),
        ),
      ],
    );
  }
}