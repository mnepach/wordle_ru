import 'dart:convert';
import 'dart:io';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
import '../models/game_stats.dart';
import 'sync_service.dart';

class StatsService {
  static const String _statsKey = 'game_stats_v1';
  static const String _deviceIdKey = 'device_id_v1';
  static GameStats? _cachedStats;

  // –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  static Future<String> _getDeviceId() async {
    final prefs = await SharedPreferences.getInstance();
    String? deviceId = prefs.getString(_deviceIdKey);

    if (deviceId == null) {
      deviceId = _generateDeviceId();
      await prefs.setString(_deviceIdKey, deviceId);
    }

    return deviceId;
  }

  static String _generateDeviceId() {
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final random = timestamp.toString().split('').reversed.join();
    String platform = 'unknown';

    if (kIsWeb) {
      platform = 'web';
    } else if (Platform.isAndroid) {
      platform = 'android';
    } else if (Platform.isIOS) {
      platform = 'ios';
    } else if (Platform.isWindows) {
      platform = 'windows';
    } else if (Platform.isMacOS) {
      platform = 'macos';
    } else if (Platform.isLinux) {
      platform = 'linux';
    }

    return '$platform-$random';
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  static Future<GameStats> loadStats() async {
    if (_cachedStats != null) return _cachedStats!;

    final prefs = await SharedPreferences.getInstance();
    final deviceId = await _getDeviceId();
    final statsJson = prefs.getString(_statsKey);

    if (statsJson != null) {
      try {
        final decoded = json.decode(statsJson);
        _cachedStats = GameStats.fromJson(decoded);
        print('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${_cachedStats!.gamesPlayed} –∏–≥—Ä');
        return _cachedStats!;
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
      }
    }

    _cachedStats = GameStats(deviceId: deviceId);
    print('üìä –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
    return _cachedStats!;
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  static Future<void> saveStats(GameStats stats) async {
    _cachedStats = stats;
    final prefs = await SharedPreferences.getInstance();
    final statsJson = json.encode(stats.toJson());
    await prefs.setString(_statsKey, statsJson);
    print('üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ');
  }

  // –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã (—Å —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π)
  static Future<void> recordGame({
    required bool won,
    required int attempts,
  }) async {
    final stats = await loadStats();
    stats.recordGame(won: won, attempts: attempts);
    await saveStats(stats);

    print('üéÆ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –∑–∞–ø–∏—Å–∞–Ω: ${won ? "–ø–æ–±–µ–¥–∞" : "–ø–æ—Ä–∞–∂–µ–Ω–∏–µ"} –∑–∞ $attempts –ø–æ–ø—ã—Ç–æ–∫');

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¢–û–õ–¨–ö–û –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ù–æ–≤–∞—è –∏–≥—Ä–∞"
    // –ó–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  }

  // –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ù–æ–≤–∞—è –∏–≥—Ä–∞"
  static Future<void> syncNow() async {
    try {
      print('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –Ω–æ–≤–æ–π –∏–≥—Ä–µ...');
      await SyncService().syncAfterGame();
      print('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
    }
  }

  // –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  static Future<void> resetStats() async {
    final deviceId = await _getDeviceId();
    final newStats = GameStats(deviceId: deviceId);
    await saveStats(newStats);

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–±—Ä–æ—Å —Å –æ–±–ª–∞–∫–æ–º
    try {
      await SyncService().syncAfterGame();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: $e');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
  static String getPlatformInfo() {
    if (kIsWeb) {
      return 'Web';
    } else if (Platform.isAndroid) {
      return 'Android';
    } else if (Platform.isIOS) {
      return 'iOS';
    } else if (Platform.isWindows) {
      return 'Windows';
    } else if (Platform.isMacOS) {
      return 'macOS';
    } else if (Platform.isLinux) {
      return 'Linux';
    }
    return 'Unknown';
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  static Future<void> refreshCache() async {
    _cachedStats = null;
    await loadStats();
  }
}