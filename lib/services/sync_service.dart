import 'dart:async';
import 'package:firebase_database/firebase_database.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/game_stats.dart';
import 'stats_service.dart';

enum SyncStatus {
  idle,
  syncing,
  synced,
  error,
  offline,
}

class SyncService {
  static final SyncService _instance = SyncService._internal();
  factory SyncService() => _instance;
  SyncService._internal();

  FirebaseDatabase? _database;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  String? _userId;
  StreamSubscription<DatabaseEvent>? _statsSubscription;

  final _syncStatusController = StreamController<SyncStatus>.broadcast();
  Stream<SyncStatus> get syncStatusStream => _syncStatusController.stream;

  SyncStatus _currentStatus = SyncStatus.idle;
  SyncStatus get currentStatus => _currentStatus;

  DateTime? _lastSyncTime;

  Future<void> initialize() async {
    try {
      _updateStatus(SyncStatus.syncing);

      _database = FirebaseDatabase.instance;
      _database!.databaseURL = 'https://wordle-ru-f1f08-default-rtdb.firebaseio.com';

      _userId = await _getOrCreateUserId();

      if (_userId == null || _userId!.isEmpty) {
        print('‚ùå –û–±–ª–∞—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)');
        _updateStatus(SyncStatus.offline);
        return;
      }

      print('‚úÖ Sync Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. User ID: $_userId');

      _subscribeToChanges();
      _updateStatus(SyncStatus.synced);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      _updateStatus(SyncStatus.offline);
    }
  }

  Future<String?> _getOrCreateUserId() async {
    final prefs = await SharedPreferences.getInstance();
    String? userId = prefs.getString('cloud_user_id');

    if (userId == null || userId.isEmpty || userId.startsWith('local_')) {
      try {
        final userCredential = await _auth.signInAnonymously();
        userId = userCredential.user?.uid;

        if (userId != null && userId.isNotEmpty) {
          await prefs.setString('cloud_user_id', userId);
          print('‚úÖ –°–æ–∑–¥–∞–Ω/–ø–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π Firebase User ID: $userId');
          return userId;
        } else {
          throw Exception('Firebase –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π UID');
        }
      } catch (e) {
        print('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Firebase: $e');
        return null;
      }
    }

    return userId.startsWith('local_') ? null : userId;
  }

  void _subscribeToChanges() {
    if (_userId == null || _database == null) return;

    final ref = _database!.ref('users/$_userId/stats');
    print('üì° –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞: users/$_userId/stats');

    _statsSubscription = ref.onValue.listen((event) async {
      if (event.snapshot.exists && event.snapshot.value != null) {
        try {
          print('üì• –ü–æ–ª—É—á–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ –æ–±–ª–∞–∫–∞');
          final data = event.snapshot.value;

          Map<String, dynamic> cloudData;
          if (data is Map) {
            cloudData = Map<String, dynamic>.from(data);
          } else {
            print('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: ${data.runtimeType}');
            return;
          }

          final cloudStats = GameStats.fromJson(cloudData);
          final localStats = await StatsService.loadStats();

          // –õ–û–ì–ò–ö–ê –°–õ–ò–Ø–ù–ò–Ø: –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ –æ–±–ª–∞–∫–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–ª–∞—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–µ–µ.
          // –ò–Ω–∞—á–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (forceSync) –≤—ã–ø–æ–ª–Ω–∏—Ç —Å–ª–∏—è–Ω–∏–µ.
          if (cloudStats.lastSyncTime.isAfter(localStats.lastSyncTime)) {
            print('‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–ª–µ–µ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞');
            await StatsService.saveStats(cloudStats);
            _updateStatus(SyncStatus.synced);
          }
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: $e');
          print('Stack trace: ${StackTrace.current}');
        }
      }
    }, onError: (error) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: $error');
      _updateStatus(SyncStatus.error);
    });
  }

  Future<void> syncAfterGame() async {
    if (_userId == null || _database == null) {
      print('‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (offline)');
      _updateStatus(SyncStatus.offline);
      return;
    }

    try {
      _updateStatus(SyncStatus.syncing);
      print('üì§ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –∏–≥—Ä—ã...');

      final stats = await StatsService.loadStats();
      final updatedStats = stats.copyWith(lastSyncTime: DateTime.now());

      final ref = _database!.ref('users/$_userId/stats');
      await ref.set(updatedStats.toJson());

      _lastSyncTime = DateTime.now();
      print('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      _updateStatus(SyncStatus.synced);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      print('Stack trace: ${StackTrace.current}');
      _updateStatus(SyncStatus.error);
      rethrow;
    }
  }

  Future<void> forceSync() async {
    if (_userId == null || _database == null) {
      print('‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      _updateStatus(SyncStatus.offline);
      return;
    }

    try {
      _updateStatus(SyncStatus.syncing);
      print('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (—Å–ª–∏—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)...');

      final ref = _database!.ref('users/$_userId/stats');
      final snapshot = await ref.get();

      if (snapshot.exists && snapshot.value != null) {
        final data = snapshot.value;
        Map<String, dynamic> cloudData;

        if (data is Map) {
          cloudData = Map<String, dynamic>.from(data);
        } else {
          throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: ${data.runtimeType}');
        }

        final cloudStats = GameStats.fromJson(cloudData);
        final localStats = await StatsService.loadStats();

        // –°–õ–ò–Ø–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º mergeWith –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏ –æ–±–ª–∞—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        final mergedStats = localStats.mergeWith(cloudStats);
        await StatsService.saveStats(mergedStats);

        final updatedStats = mergedStats.copyWith(lastSyncTime: DateTime.now());
        await ref.set(updatedStats.toJson());

        _lastSyncTime = DateTime.now();
        print('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      } else {
        print('‚ö†Ô∏è –î–∞–Ω–Ω—ã—Ö –≤ –æ–±–ª–∞–∫–µ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ');
        await syncAfterGame();
      }

      _updateStatus(SyncStatus.synced);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      print('Stack trace: ${StackTrace.current}');
      _updateStatus(SyncStatus.error);
      rethrow;
    }
  }

  Future<void> forcePushLocalStats() async {
    if (_userId == null || _database == null) {
      print('‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      _updateStatus(SyncStatus.offline);
      return;
    }

    try {
      _updateStatus(SyncStatus.syncing);
      print('‚è´ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–ª–∞–∫–æ...');

      final stats = await StatsService.loadStats();
      final updatedStats = stats.copyWith(lastSyncTime: DateTime.now());

      final ref = _database!.ref('users/$_userId/stats');
      await ref.set(updatedStats.toJson());

      _lastSyncTime = DateTime.now();
      print('‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      _updateStatus(SyncStatus.synced);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: $e');
      _updateStatus(SyncStatus.error);
      rethrow;
    }
  }

  void _updateStatus(SyncStatus status) {
    _currentStatus = status;
    _syncStatusController.add(status);
  }

  Future<String?> getUserId() async => _userId;

  String getSyncInfo() {
    switch (_currentStatus) {
      case SyncStatus.idle:
        return '–û–∂–∏–¥–∞–Ω–∏–µ';
      case SyncStatus.syncing:
        return '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...';
      case SyncStatus.synced:
        if (_lastSyncTime != null) {
          final diff = DateTime.now().difference(_lastSyncTime!);
          if (diff.inSeconds < 60) {
            return '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ (—Ç–æ–ª—å–∫–æ —á—Ç–æ)';
          } else if (diff.inMinutes < 60) {
            return '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ (${diff.inMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥)';
          } else {
            return '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ (${diff.inHours} —á –Ω–∞–∑–∞–¥)';
          }
        }
        return '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ';
      case SyncStatus.error:
        return '–û—à–∏–±–∫–∞–∏–∑–∞—Ü–∏–∏';
      case SyncStatus.offline:
        return '–û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º';
    }
  }

  Future<void> dispose() async {
    await _statsSubscription?.cancel();
    await _syncStatusController.close();
  }
}